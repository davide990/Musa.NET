/**
         __  __                                     _   
        |  \/  |                                   | |  
        | \  / | _   _  ___   __ _     _ __    ___ | |_ 
        | |\/| || | | |/ __| / _` |   | '_ \  / _ \| __|
        | |  | || |_| |\__ \| (_| | _ | | | ||  __/| |_ 
        |_|  |_| \__,_||___/ \__,_|(_)|_| |_| \___| \__|

*/
using Quartz;
using System.Collections.Generic;

namespace AgentLibrary
{
    /// <summary>
    /// Si identifica con il concetto di capability
    /// </summary>
    public abstract class AgentJob : IJob
    {
        /// <summary>
        /// The required agent roles for the fulfilment of this job
        /// </summary>
        private List<AgentRole> allowed_roles;
        
        public AgentJob(string name)
        {
            this._job_name = name;
            allowed_roles = new List<AgentRole>();
        }

        private AgentJobResult _job_result;
        public AgentJobResult job_result
        {
            get { return _job_result; }
        }

        /// <summary>
        /// The expected exit condition this job have to generate (TODO -> must be a formula)
        /// </summary>
        private string expected_post_condition;
        
        /// <summary>
        /// The exit condition generated by the execution of this job (TODO -> must be a formula)
        /// </summary>
        private string post_condition;

        private string _job_name;
        public string job_name
        {
            get { return _job_name; }
            protected set { _job_name = value; }
        }

        public abstract void Execute(IJobExecutionContext context);
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from formula_grammar.g by ANTLR 4.3

// Unreachable code detected
using System;


#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
//[System.CLSCompliant(false)]
public partial class formula_grammarParser : Parser {
	public const int
		T__2=1, T__1=2, T__0=3, ID=4, INT=5, FLOAT=6, WS=7, String=8, CHAR=9, 
		LPAREN=10, RPAREN=11, AND=12, OR=13, NOT=14;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'true'", "','", "'false'", "ID", "INT", "FLOAT", "WS", "String", 
		"CHAR", "'('", "')'", "'&'", "'|'", "'!'"
	};
	public const int
		RULE_condition = 0, RULE_formula = 1, RULE_disjunction = 2, RULE_conjunction = 3, 
		RULE_negation = 4, RULE_predicate = 5, RULE_predicateTuple = 6, RULE_term = 7, 
		RULE_literal_term = 8, RULE_variable_term = 9, RULE_the_int_type = 10, 
		RULE_the_boolean_type = 11, RULE_the_string_type = 12, RULE_the_char_type = 13, 
		RULE_the_float_type = 14, RULE_identifier = 15;
	public static readonly string[] ruleNames = {
		"condition", "formula", "disjunction", "conjunction", "negation", "predicate", 
		"predicateTuple", "term", "literal_term", "variable_term", "the_int_type", 
		"the_boolean_type", "the_string_type", "the_char_type", "the_float_type", 
		"identifier"
	};

	public override string GrammarFileName { get { return "formula_grammar.g"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public formula_grammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(formula_grammarParser.Eof, 0); }
		public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; formula();
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaContext : ParserRuleContext {
		public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; disjunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		public IReadOnlyList<ConjunctionContext> conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		public IReadOnlyList<ITerminalNode> OR() { return GetTokens(formula_grammarParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(formula_grammarParser.OR, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; conjunction();
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 38; Match(OR);
				State = 39; conjunction();
				}
				}
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		public ITerminalNode AND(int i) {
			return GetToken(formula_grammarParser.AND, i);
		}
		public IReadOnlyList<NegationContext> negation() {
			return GetRuleContexts<NegationContext>();
		}
		public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public IReadOnlyList<ITerminalNode> AND() { return GetTokens(formula_grammarParser.AND); }
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; negation();
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 46; Match(AND);
				State = 47; negation();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(formula_grammarParser.NOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(formula_grammarParser.LPAREN, 0); }
		public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(formula_grammarParser.RPAREN, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_negation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 53; Match(NOT);
				}
			}

			State = 61;
			switch (_input.La(1)) {
			case ID:
				{
				State = 56; predicate();
				}
				break;
			case LPAREN:
				{
				State = 57; Match(LPAREN);
				State = 58; formula();
				State = 59; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public IdentifierContext functor;
		public ITerminalNode LPAREN() { return GetToken(formula_grammarParser.LPAREN, 0); }
		public PredicateTupleContext predicateTuple() {
			return GetRuleContext<PredicateTupleContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(formula_grammarParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; _localctx.functor = identifier();
			State = 64; Match(LPAREN);
			State = 65; predicateTuple();
			State = 66; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateTupleContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateTuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterPredicateTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitPredicateTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateTupleContext predicateTuple() {
		PredicateTupleContext _localctx = new PredicateTupleContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicateTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; term();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 69; Match(T__1);
				State = 70; term();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public Variable_termContext variable_term() {
			return GetRuleContext<Variable_termContext>(0);
		}
		public Literal_termContext literal_term() {
			return GetRuleContext<Literal_termContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_term);
		try {
			State = 78;
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; literal_term();
				}
				break;
			case T__2:
			case T__0:
			case INT:
			case FLOAT:
			case String:
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; variable_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_termContext : ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Literal_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterLiteral_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitLiteral_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_termContext literal_term() {
		Literal_termContext _localctx = new Literal_termContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_literal_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_termContext : ParserRuleContext {
		public The_boolean_typeContext the_boolean_type() {
			return GetRuleContext<The_boolean_typeContext>(0);
		}
		public The_float_typeContext the_float_type() {
			return GetRuleContext<The_float_typeContext>(0);
		}
		public The_int_typeContext the_int_type() {
			return GetRuleContext<The_int_typeContext>(0);
		}
		public The_char_typeContext the_char_type() {
			return GetRuleContext<The_char_typeContext>(0);
		}
		public The_string_typeContext the_string_type() {
			return GetRuleContext<The_string_typeContext>(0);
		}
		public Variable_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterVariable_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitVariable_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_termContext variable_term() {
		Variable_termContext _localctx = new Variable_termContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_variable_term);
		try {
			State = 87;
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; the_int_type();
				}
				break;
			case T__2:
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; the_boolean_type();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84; the_string_type();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85; the_float_type();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; the_char_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class The_int_typeContext : ParserRuleContext {
		public int value;
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(formula_grammarParser.INT, 0); }
		public The_int_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_the_int_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterThe_int_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitThe_int_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThe_int_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public The_int_typeContext the_int_type() {
		The_int_typeContext _localctx = new The_int_typeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_the_int_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; _localctx._INT = Match(INT);
			_localctx.value =  Int32.Parse((_localctx._INT!=null?_localctx._INT.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class The_boolean_typeContext : ParserRuleContext {
		public bool value;
		public The_boolean_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_the_boolean_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterThe_boolean_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitThe_boolean_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThe_boolean_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public The_boolean_typeContext the_boolean_type() {
		The_boolean_typeContext _localctx = new The_boolean_typeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_the_boolean_type);
		try {
			State = 96;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(T__0);
				_localctx.value =  false;
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(T__2);
				_localctx.value =  true;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class The_string_typeContext : ParserRuleContext {
		public string value;
		public IToken _String;
		public ITerminalNode String() { return GetToken(formula_grammarParser.String, 0); }
		public The_string_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_the_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterThe_string_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitThe_string_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThe_string_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public The_string_typeContext the_string_type() {
		The_string_typeContext _localctx = new The_string_typeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_the_string_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; _localctx._String = Match(String);
			_localctx.value =  (_localctx._String!=null?_localctx._String.Text:null).Replace("\"","");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class The_char_typeContext : ParserRuleContext {
		public char value;
		public IToken _CHAR;
		public ITerminalNode CHAR() { return GetToken(formula_grammarParser.CHAR, 0); }
		public The_char_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_the_char_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterThe_char_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitThe_char_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThe_char_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public The_char_typeContext the_char_type() {
		The_char_typeContext _localctx = new The_char_typeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_the_char_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx._CHAR = Match(CHAR);
			_localctx.value =  (_localctx._CHAR!=null?_localctx._CHAR.Text:null).Replace("'","")[0];
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class The_float_typeContext : ParserRuleContext {
		public float value;
		public IToken _FLOAT;
		public ITerminalNode FLOAT() { return GetToken(formula_grammarParser.FLOAT, 0); }
		public The_float_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_the_float_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterThe_float_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitThe_float_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThe_float_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public The_float_typeContext the_float_type() {
		The_float_typeContext _localctx = new The_float_typeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_the_float_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; _localctx._FLOAT = Match(FLOAT);
			_localctx.value =  float.Parse((_localctx._FLOAT!=null?_localctx._FLOAT.Text:null), System.Globalization.CultureInfo.InvariantCulture.NumberFormat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public String expr;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(formula_grammarParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; _localctx._ID = Match(ID);
			_localctx.expr =  (_localctx._ID!=null?_localctx._ID.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x10q\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4"+
		"+\n\x4\f\x4\xE\x4.\v\x4\x3\x5\x3\x5\x3\x5\a\x5\x33\n\x5\f\x5\xE\x5\x36"+
		"\v\x5\x3\x6\x5\x6\x39\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6@\n\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\a\bJ\n\b\f\b\xE\bM\v\b\x3\t\x3\t"+
		"\x5\tQ\n\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vZ\n\v\x3\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\x63\n\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x2\x2\x2\x12\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\x2\x2k\x2\"\x3\x2\x2\x2\x4%\x3\x2\x2\x2\x6\'\x3"+
		"\x2\x2\x2\b/\x3\x2\x2\x2\n\x38\x3\x2\x2\x2\f\x41\x3\x2\x2\x2\xE\x46\x3"+
		"\x2\x2\x2\x10P\x3\x2\x2\x2\x12R\x3\x2\x2\x2\x14Y\x3\x2\x2\x2\x16[\x3\x2"+
		"\x2\x2\x18\x62\x3\x2\x2\x2\x1A\x64\x3\x2\x2\x2\x1Cg\x3\x2\x2\x2\x1Ej\x3"+
		"\x2\x2\x2 m\x3\x2\x2\x2\"#\x5\x4\x3\x2#$\a\x2\x2\x3$\x3\x3\x2\x2\x2%&"+
		"\x5\x6\x4\x2&\x5\x3\x2\x2\x2\',\x5\b\x5\x2()\a\xF\x2\x2)+\x5\b\x5\x2*"+
		"(\x3\x2\x2\x2+.\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\a\x3\x2\x2\x2"+
		".,\x3\x2\x2\x2/\x34\x5\n\x6\x2\x30\x31\a\xE\x2\x2\x31\x33\x5\n\x6\x2\x32"+
		"\x30\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2"+
		"\x2\x2\x35\t\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x39\a\x10\x2\x2\x38\x37"+
		"\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39?\x3\x2\x2\x2:@\x5\f\a\x2;<\a\f\x2"+
		"\x2<=\x5\x4\x3\x2=>\a\r\x2\x2>@\x3\x2\x2\x2?:\x3\x2\x2\x2?;\x3\x2\x2\x2"+
		"@\v\x3\x2\x2\x2\x41\x42\x5 \x11\x2\x42\x43\a\f\x2\x2\x43\x44\x5\xE\b\x2"+
		"\x44\x45\a\r\x2\x2\x45\r\x3\x2\x2\x2\x46K\x5\x10\t\x2GH\a\x4\x2\x2HJ\x5"+
		"\x10\t\x2IG\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\xF"+
		"\x3\x2\x2\x2MK\x3\x2\x2\x2NQ\x5\x12\n\x2OQ\x5\x14\v\x2PN\x3\x2\x2\x2P"+
		"O\x3\x2\x2\x2Q\x11\x3\x2\x2\x2RS\x5 \x11\x2S\x13\x3\x2\x2\x2TZ\x5\x16"+
		"\f\x2UZ\x5\x18\r\x2VZ\x5\x1A\xE\x2WZ\x5\x1E\x10\x2XZ\x5\x1C\xF\x2YT\x3"+
		"\x2\x2\x2YU\x3\x2\x2\x2YV\x3\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\x15"+
		"\x3\x2\x2\x2[\\\a\a\x2\x2\\]\b\f\x1\x2]\x17\x3\x2\x2\x2^_\a\x5\x2\x2_"+
		"\x63\b\r\x1\x2`\x61\a\x3\x2\x2\x61\x63\b\r\x1\x2\x62^\x3\x2\x2\x2\x62"+
		"`\x3\x2\x2\x2\x63\x19\x3\x2\x2\x2\x64\x65\a\n\x2\x2\x65\x66\b\xE\x1\x2"+
		"\x66\x1B\x3\x2\x2\x2gh\a\v\x2\x2hi\b\xF\x1\x2i\x1D\x3\x2\x2\x2jk\a\b\x2"+
		"\x2kl\b\x10\x1\x2l\x1F\x3\x2\x2\x2mn\a\x6\x2\x2no\b\x11\x1\x2o!\x3\x2"+
		"\x2\x2\n,\x34\x38?KPY\x62";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}

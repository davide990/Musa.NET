//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from formula_grammar.g by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class formula_grammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, ID=16, INT=17, 
		FLOAT=18, WS=19, String=20, CHAR=21, LPAREN=22, RPAREN=23, ASSIGNMENT_OP=24, 
		AND=25, OR=26, NOT=27;
	public const int
		RULE_condition = 0, RULE_formula = 1, RULE_disjunction = 2, RULE_conjunction = 3, 
		RULE_negation = 4, RULE_predicate = 5, RULE_predicateTuple = 6, RULE_term = 7, 
		RULE_literal_term = 8, RULE_variable_term = 9, RULE_varValue = 10, RULE_identifier = 11, 
		RULE_varType = 12, RULE_simple_type = 13, RULE_numeric_type = 14, RULE_integral_type = 15, 
		RULE_floating_point_type = 16, RULE_nullable_type = 17, RULE_string_type = 18;
	public static readonly string[] ruleNames = {
		"condition", "formula", "disjunction", "conjunction", "negation", "predicate", 
		"predicateTuple", "term", "literal_term", "variable_term", "varValue", 
		"identifier", "varType", "simple_type", "numeric_type", "integral_type", 
		"floating_point_type", "nullable_type", "string_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'bool'", "'decimal'", "'sbyte'", "'byte'", "'short'", "'ushort'", 
		"'int'", "'uint'", "'long'", "'ulong'", "'char'", "'float'", "'double'", 
		"'string'", null, null, null, null, null, null, "'('", "')'", "'<-'", 
		"'&'", "'|'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ID", "INT", "FLOAT", "WS", "String", "CHAR", 
		"LPAREN", "RPAREN", "ASSIGNMENT_OP", "AND", "OR", "NOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "formula_grammar.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public formula_grammarParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ConditionContext : ParserRuleContext {
		public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(formula_grammarParser.Eof, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 0, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; formula();
			State = 39; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormulaContext : ParserRuleContext {
		public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 2, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; disjunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(formula_grammarParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(formula_grammarParser.OR, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; conjunction();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 44; Match(OR);
				State = 45; conjunction();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(formula_grammarParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(formula_grammarParser.AND, i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; negation();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AND) {
				{
				{
				State = 52; Match(AND);
				State = 53; negation();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(formula_grammarParser.LPAREN, 0); }
		public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(formula_grammarParser.RPAREN, 0); }
		public ITerminalNode NOT() { return GetToken(formula_grammarParser.NOT, 0); }
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 8, RULE_negation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = TokenStream.La(1);
			if (_la==NOT) {
				{
				State = 59; Match(NOT);
				}
			}

			State = 67;
			switch (TokenStream.La(1)) {
			case ID:
				{
				State = 62; predicate();
				}
				break;
			case LPAREN:
				{
				State = 63; Match(LPAREN);
				State = 64; formula();
				State = 65; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public IdentifierContext functor;
		public ITerminalNode LPAREN() { return GetToken(formula_grammarParser.LPAREN, 0); }
		public PredicateTupleContext predicateTuple() {
			return GetRuleContext<PredicateTupleContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(formula_grammarParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 10, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; _localctx.functor = identifier();
			State = 70; Match(LPAREN);
			State = 71; predicateTuple();
			State = 72; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateTupleContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateTuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterPredicateTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitPredicateTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateTupleContext predicateTuple() {
		PredicateTupleContext _localctx = new PredicateTupleContext(Context, State);
		EnterRule(_localctx, 12, RULE_predicateTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; term();
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 75; Match(T__0);
				State = 76; term();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public Literal_termContext literal_term() {
			return GetRuleContext<Literal_termContext>(0);
		}
		public Variable_termContext variable_term() {
			return GetRuleContext<Variable_termContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 14, RULE_term);
		try {
			State = 84;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; literal_term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; variable_term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_termContext : ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Literal_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterLiteral_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitLiteral_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_termContext literal_term() {
		Literal_termContext _localctx = new Literal_termContext(Context, State);
		EnterRule(_localctx, 16, RULE_literal_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_termContext : ParserRuleContext {
		public IdentifierContext name;
		public VarTypeContext type;
		public VarValueContext value;
		public ITerminalNode ASSIGNMENT_OP() { return GetToken(formula_grammarParser.ASSIGNMENT_OP, 0); }
		public ITerminalNode LPAREN() { return GetToken(formula_grammarParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(formula_grammarParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VarTypeContext varType() {
			return GetRuleContext<VarTypeContext>(0);
		}
		public VarValueContext varValue() {
			return GetRuleContext<VarValueContext>(0);
		}
		public Variable_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterVariable_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitVariable_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_termContext variable_term() {
		Variable_termContext _localctx = new Variable_termContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; _localctx.name = identifier();
			State = 89; Match(ASSIGNMENT_OP);
			State = 90; _localctx.type = varType();
			State = 91; Match(LPAREN);
			State = 92; _localctx.value = varValue();
			State = 93; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarValueContext : ParserRuleContext {
		public String expr;
		public IToken _INT;
		public IToken _FLOAT;
		public IToken _String;
		public IToken _CHAR;
		public ITerminalNode INT() { return GetToken(formula_grammarParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(formula_grammarParser.FLOAT, 0); }
		public ITerminalNode String() { return GetToken(formula_grammarParser.String, 0); }
		public ITerminalNode CHAR() { return GetToken(formula_grammarParser.CHAR, 0); }
		public VarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterVarValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitVarValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarValueContext varValue() {
		VarValueContext _localctx = new VarValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_varValue);
		try {
			State = 103;
			switch (TokenStream.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; _localctx._INT = Match(INT);
				_localctx.expr =  (_localctx._INT!=null?_localctx._INT.Text:null);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; _localctx._FLOAT = Match(FLOAT);
				_localctx.expr =  (_localctx._FLOAT!=null?_localctx._FLOAT.Text:null);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99; _localctx._String = Match(String);
				_localctx.expr =  (_localctx._String!=null?_localctx._String.Text:null);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 101; _localctx._CHAR = Match(CHAR);
				_localctx.expr =  (_localctx._CHAR!=null?_localctx._CHAR.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public String expr;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(formula_grammarParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; _localctx._ID = Match(ID);
			_localctx.expr =  (_localctx._ID!=null?_localctx._ID.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarTypeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Nullable_typeContext nullable_type() {
			return GetRuleContext<Nullable_typeContext>(0);
		}
		public VarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varType; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterVarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitVarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarTypeContext varType() {
		VarTypeContext _localctx = new VarTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_varType);
		try {
			State = 110;
			switch (TokenStream.La(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; simple_type();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; nullable_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public String expr;
		public Numeric_typeContext _numeric_type;
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_simple_type);
		try {
			State = 117;
			switch (TokenStream.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; _localctx._numeric_type = numeric_type();
				_localctx.expr =  _localctx._numeric_type.expr; 
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; Match(T__1);
				_localctx.expr =  "System.Boolean";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public String expr;
		public Integral_typeContext _integral_type;
		public Floating_point_typeContext _floating_point_type;
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_numeric_type);
		try {
			State = 127;
			switch (TokenStream.La(1)) {
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; _localctx._integral_type = integral_type();
				_localctx.expr =  _localctx._integral_type.expr; 
				}
				break;
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; _localctx._floating_point_type = floating_point_type();
				_localctx.expr =  _localctx._floating_point_type.expr; 
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(T__2);
				_localctx.expr =  "System.Decimal";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public String expr;
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_integral_type);
		try {
			State = 147;
			switch (TokenStream.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; Match(T__3);
				_localctx.expr =  "System.SByte";
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; Match(T__4);
				_localctx.expr =  "System.Byte";
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; Match(T__5);
				_localctx.expr =  "System.Int16";
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; Match(T__6);
				_localctx.expr =  "System.UInt16";
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137; Match(T__7);
				_localctx.expr =  "System.Int32";
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 139; Match(T__8);
				_localctx.expr =  "System.UInt32";
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 141; Match(T__9);
				_localctx.expr =  "System.Int64";
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 8);
				{
				State = 143; Match(T__10);
				_localctx.expr =  "System.UInt64";
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 9);
				{
				State = 145; Match(T__11);
				_localctx.expr =  "System.Char";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public String expr;
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_floating_point_type);
		try {
			State = 153;
			switch (TokenStream.La(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; Match(T__12);
				_localctx.expr =  "System.Single";
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(T__13);
				_localctx.expr =  "System.Double";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_typeContext : ParserRuleContext {
		public String expr;
		public String_typeContext _string_type;
		public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		public Nullable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterNullable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitNullable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_typeContext nullable_type() {
		Nullable_typeContext _localctx = new Nullable_typeContext(Context, State);
		EnterRule(_localctx, 34, RULE_nullable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; _localctx._string_type = string_type();
			_localctx.expr =  _localctx._string_type.expr; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		public String expr;
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iformula_grammarListener typedListener = listener as Iformula_grammarListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iformula_grammarVisitor<TResult> typedVisitor = visitor as Iformula_grammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 36, RULE_string_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__14);
			_localctx.expr =  "System.String";
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1D\xA4\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4\x31\n\x4\f\x4\xE\x4\x34\v\x4"+
		"\x3\x5\x3\x5\x3\x5\a\x5\x39\n\x5\f\x5\xE\x5<\v\x5\x3\x6\x5\x6?\n\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x46\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\a\bP\n\b\f\b\xE\bS\v\b\x3\t\x3\t\x5\tW\n\t\x3\n\x3\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x5\fj\n\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xEq\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xFx\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\x82\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x96\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x9C\n"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x2\x2\x15\x2\x4"+
		"\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&\x2\x2\xA6\x2(\x3\x2"+
		"\x2\x2\x4+\x3\x2\x2\x2\x6-\x3\x2\x2\x2\b\x35\x3\x2\x2\x2\n>\x3\x2\x2\x2"+
		"\fG\x3\x2\x2\x2\xEL\x3\x2\x2\x2\x10V\x3\x2\x2\x2\x12X\x3\x2\x2\x2\x14"+
		"Z\x3\x2\x2\x2\x16i\x3\x2\x2\x2\x18k\x3\x2\x2\x2\x1Ap\x3\x2\x2\x2\x1Cw"+
		"\x3\x2\x2\x2\x1E\x81\x3\x2\x2\x2 \x95\x3\x2\x2\x2\"\x9B\x3\x2\x2\x2$\x9D"+
		"\x3\x2\x2\x2&\xA0\x3\x2\x2\x2()\x5\x4\x3\x2)*\a\x2\x2\x3*\x3\x3\x2\x2"+
		"\x2+,\x5\x6\x4\x2,\x5\x3\x2\x2\x2-\x32\x5\b\x5\x2./\a\x1C\x2\x2/\x31\x5"+
		"\b\x5\x2\x30.\x3\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32"+
		"\x33\x3\x2\x2\x2\x33\a\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35:\x5\n\x6\x2"+
		"\x36\x37\a\x1B\x2\x2\x37\x39\x5\n\x6\x2\x38\x36\x3\x2\x2\x2\x39<\x3\x2"+
		"\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\t\x3\x2\x2\x2<:\x3\x2\x2\x2=?\a"+
		"\x1D\x2\x2>=\x3\x2\x2\x2>?\x3\x2\x2\x2?\x45\x3\x2\x2\x2@\x46\x5\f\a\x2"+
		"\x41\x42\a\x18\x2\x2\x42\x43\x5\x4\x3\x2\x43\x44\a\x19\x2\x2\x44\x46\x3"+
		"\x2\x2\x2\x45@\x3\x2\x2\x2\x45\x41\x3\x2\x2\x2\x46\v\x3\x2\x2\x2GH\x5"+
		"\x18\r\x2HI\a\x18\x2\x2IJ\x5\xE\b\x2JK\a\x19\x2\x2K\r\x3\x2\x2\x2LQ\x5"+
		"\x10\t\x2MN\a\x3\x2\x2NP\x5\x10\t\x2OM\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3"+
		"\x2\x2\x2QR\x3\x2\x2\x2R\xF\x3\x2\x2\x2SQ\x3\x2\x2\x2TW\x5\x12\n\x2UW"+
		"\x5\x14\v\x2VT\x3\x2\x2\x2VU\x3\x2\x2\x2W\x11\x3\x2\x2\x2XY\x5\x18\r\x2"+
		"Y\x13\x3\x2\x2\x2Z[\x5\x18\r\x2[\\\a\x1A\x2\x2\\]\x5\x1A\xE\x2]^\a\x18"+
		"\x2\x2^_\x5\x16\f\x2_`\a\x19\x2\x2`\x15\x3\x2\x2\x2\x61\x62\a\x13\x2\x2"+
		"\x62j\b\f\x1\x2\x63\x64\a\x14\x2\x2\x64j\b\f\x1\x2\x65\x66\a\x16\x2\x2"+
		"\x66j\b\f\x1\x2gh\a\x17\x2\x2hj\b\f\x1\x2i\x61\x3\x2\x2\x2i\x63\x3\x2"+
		"\x2\x2i\x65\x3\x2\x2\x2ig\x3\x2\x2\x2j\x17\x3\x2\x2\x2kl\a\x12\x2\x2l"+
		"m\b\r\x1\x2m\x19\x3\x2\x2\x2nq\x5\x1C\xF\x2oq\x5$\x13\x2pn\x3\x2\x2\x2"+
		"po\x3\x2\x2\x2q\x1B\x3\x2\x2\x2rs\x5\x1E\x10\x2st\b\xF\x1\x2tx\x3\x2\x2"+
		"\x2uv\a\x4\x2\x2vx\b\xF\x1\x2wr\x3\x2\x2\x2wu\x3\x2\x2\x2x\x1D\x3\x2\x2"+
		"\x2yz\x5 \x11\x2z{\b\x10\x1\x2{\x82\x3\x2\x2\x2|}\x5\"\x12\x2}~\b\x10"+
		"\x1\x2~\x82\x3\x2\x2\x2\x7F\x80\a\x5\x2\x2\x80\x82\b\x10\x1\x2\x81y\x3"+
		"\x2\x2\x2\x81|\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x1F\x3\x2\x2\x2\x83"+
		"\x84\a\x6\x2\x2\x84\x96\b\x11\x1\x2\x85\x86\a\a\x2\x2\x86\x96\b\x11\x1"+
		"\x2\x87\x88\a\b\x2\x2\x88\x96\b\x11\x1\x2\x89\x8A\a\t\x2\x2\x8A\x96\b"+
		"\x11\x1\x2\x8B\x8C\a\n\x2\x2\x8C\x96\b\x11\x1\x2\x8D\x8E\a\v\x2\x2\x8E"+
		"\x96\b\x11\x1\x2\x8F\x90\a\f\x2\x2\x90\x96\b\x11\x1\x2\x91\x92\a\r\x2"+
		"\x2\x92\x96\b\x11\x1\x2\x93\x94\a\xE\x2\x2\x94\x96\b\x11\x1\x2\x95\x83"+
		"\x3\x2\x2\x2\x95\x85\x3\x2\x2\x2\x95\x87\x3\x2\x2\x2\x95\x89\x3\x2\x2"+
		"\x2\x95\x8B\x3\x2\x2\x2\x95\x8D\x3\x2\x2\x2\x95\x8F\x3\x2\x2\x2\x95\x91"+
		"\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96!\x3\x2\x2\x2\x97\x98\a\xF\x2\x2\x98"+
		"\x9C\b\x12\x1\x2\x99\x9A\a\x10\x2\x2\x9A\x9C\b\x12\x1\x2\x9B\x97\x3\x2"+
		"\x2\x2\x9B\x99\x3\x2\x2\x2\x9C#\x3\x2\x2\x2\x9D\x9E\x5&\x14\x2\x9E\x9F"+
		"\b\x13\x1\x2\x9F%\x3\x2\x2\x2\xA0\xA1\a\x11\x2\x2\xA1\xA2\b\x14\x1\x2"+
		"\xA2\'\x3\x2\x2\x2\xE\x32:>\x45QVipw\x81\x95\x9B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
